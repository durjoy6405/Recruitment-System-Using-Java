
/**
 * Write a description of class RecruitmentSystem here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class RecruitmentSystem extends javax.swing.JFrame {

    /**
     * Creates new form RecruitmentSystem
     */
    public RecruitmentSystem() {
        initComponents();
        setTitle("Recruitment System");
    }
    Color defaultBackground = UIManager.getColor("RadioButton.background");
    
    ArrayList <staffhire> allstaff = new ArrayList <staffhire>();
    
    int vacancy, workingHours, weeklyFractionalHours;
    String jobType, shifts, staffName, staffQualification, staffDesignation, joiningDate, appointedBy;
    double wagesPerHour, salary;
    boolean terminated, joined;
    
    fullTimeStaffHire fsho = new fullTimeStaffHire(vacancy, jobType, staffName, staffQualification, staffDesignation, joiningDate, appointedBy, salary, weeklyFractionalHours, joined);
    PartTimeStaffHire psho = new PartTimeStaffHire(vacancy, jobType, staffName, staffQualification, staffDesignation, joiningDate, appointedBy, 
                workingHours, wagesPerHour, shifts, terminated, joined);
    
    public void allStaffDisplay(){
        for(staffhire s : allstaff){
                if(s instanceof fullTimeStaffHire){
                    fullTimeStaffHire fs = (fullTimeStaffHire) s;
                    System.out.println("Vacancy No: " + fs.getvacancyNumber() + ' ' + "Staff Name: " + fs.getstaffName());
                    System.out.println("Qualification: " + fs.getQualification() + ' ' + "Designation: " + fs.getdesignationType());
                    System.out.println("Job Type: " + fs.getjobType() + ' ' + "Joining Date: " + fs.getjoiningDate());
                    System.out.println("Hirer: " + fs.getappointedBy() + ' ' + "Salary: " + fs.getSalary());
                    System.out.println("Joined Status: " + fs.getJoined() + ' ' + "Weekly Working Hour:" + fs.getWeeklyFractionalHours());
                }
                else{
                    PartTimeStaffHire ps = (PartTimeStaffHire) s;
                    System.out.println("Vacancy No: " + ps.getvacancyNumber() + ' ' + "Staff Name: " + ps.getstaffName());
                    System.out.println("Qualification: " + ps.getQualification() + ' ' + "Designation: " + ps.getdesignationType());
                    System.out.println("Job Type: " + ps.getjobType() + " " + "Joining Date: " + ps.getjoiningDate());
                    System.out.println("Hirer: " + ps.getappointedBy() + " " + "Joined Status: " + ps.getJoined());
                    System.out.println("Termination Status: " + ps.getTerminated() + " " + "Working Hours:" + ps.getWorkingHour());
                    System.out.println("Wages Per Hour: " + ps.getWagesPerhour() + " " + "Working Shift:" + ps.getShifts());
                }
            }
    }
    
    public boolean foundVacancyForAllStaff(int n){
        for (staffhire s : allstaff) {
            if(s.getvacancyNumber() == n){
                return true;
            }
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        fullTimeStaffRB = new javax.swing.JRadioButton();
        partTimeStaffRB = new javax.swing.JRadioButton();
        mainPage = new javax.swing.JButton();
        staffDetails = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        weeklyFractionalHoursLabel = new javax.swing.JLabel();
        weeklyFractionalHoursTF = new javax.swing.JTextField();
        workingHoursLabel = new javax.swing.JLabel();
        workingHoursTF = new javax.swing.JTextField();
        wagesPerHourLabel = new javax.swing.JLabel();
        wagesPerHourTF = new javax.swing.JTextField();
        shiftsLabel = new javax.swing.JLabel();
        shiftsTF = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        displayNumberLabel = new javax.swing.JLabel();
        displayNumberTF = new javax.swing.JTextField();
        displayNumberButton = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        terminate = new javax.swing.JButton();
        terminateRB = new javax.swing.JRadioButton();
        statusDisplay = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        vacancyLabel = new javax.swing.JLabel();
        vacancyTF = new javax.swing.JTextField();
        staffNameLabel = new javax.swing.JLabel();
        staffNameTF = new javax.swing.JTextField();
        qualificationLabel = new javax.swing.JLabel();
        qualificationTF = new javax.swing.JTextField();
        designationLabel = new javax.swing.JLabel();
        designationTF = new javax.swing.JTextField();
        jobTypeLabel = new javax.swing.JLabel();
        jobTypeTF = new javax.swing.JTextField();
        joinDateLabel = new javax.swing.JLabel();
        joinDateTF = new javax.swing.JTextField();
        hirerLabel = new javax.swing.JLabel();
        hirerTF = new javax.swing.JTextField();
        salaryLabel = new javax.swing.JLabel();
        salaryTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        joinedRB = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        addFulltimeStaff = new javax.swing.JButton();
        addParttimeStaff = new javax.swing.JButton();
        addSalary = new javax.swing.JButton();
        addWorkingShifts = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1060, 470));
        setResizable(false);

        jPanel7.setBackground(new java.awt.Color(153, 255, 255));

        fullTimeStaffRB.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        fullTimeStaffRB.setText("Full Time Staff");
        fullTimeStaffRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullTimeStaffRBActionPerformed(evt);
            }
        });

        partTimeStaffRB.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        partTimeStaffRB.setText("Part Time Staff");
        partTimeStaffRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partTimeStaffRBActionPerformed(evt);
            }
        });

        mainPage.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        mainPage.setText("Main Page");
        mainPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainPageActionPerformed(evt);
            }
        });

        staffDetails.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        staffDetails.setText("Staff Details");
        staffDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fullTimeStaffRB, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(partTimeStaffRB, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainPage))
                    .addComponent(staffDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(staffDetails)
                .addGap(18, 18, 18)
                .addComponent(fullTimeStaffRB)
                .addGap(18, 18, 18)
                .addComponent(partTimeStaffRB)
                .addGap(31, 31, 31)
                .addComponent(mainPage)
                .addGap(106, 106, 106))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new java.awt.GridLayout(2, 4, 5, 10));

        weeklyFractionalHoursLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        weeklyFractionalHoursLabel.setText("Weekly Fractional Hours:");
        jPanel3.add(weeklyFractionalHoursLabel);

        weeklyFractionalHoursTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel3.add(weeklyFractionalHoursTF);

        workingHoursLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        workingHoursLabel.setText("Working Hours:");
        jPanel3.add(workingHoursLabel);

        workingHoursTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel3.add(workingHoursTF);

        wagesPerHourLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        wagesPerHourLabel.setText("Wages Per Hour:");
        jPanel3.add(wagesPerHourLabel);

        wagesPerHourTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel3.add(wagesPerHourTF);

        shiftsLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        shiftsLabel.setText("Shifts:");
        jPanel3.add(shiftsLabel);

        shiftsTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel3.add(shiftsTF);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new java.awt.GridLayout(1, 4, 5, 10));

        displayNumberLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        displayNumberLabel.setText("Total Number of Employee:");
        jPanel6.add(displayNumberLabel);

        displayNumberTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel6.add(displayNumberTF);

        displayNumberButton.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        displayNumberButton.setText("Display");
        displayNumberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayNumberButtonActionPerformed(evt);
            }
        });
        jPanel6.add(displayNumberButton);

        Clear.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });
        jPanel6.add(Clear);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new java.awt.GridLayout(1, 4, 5, 10));
        jPanel5.add(jLabel10);

        terminate.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        terminate.setText("Terminate");
        terminate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminateActionPerformed(evt);
            }
        });
        jPanel5.add(terminate);

        terminateRB.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        terminateRB.setText("Terminated");
        terminateRB.setVisible(false);
        terminateRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminateRBActionPerformed(evt);
            }
        });
        jPanel5.add(terminateRB);

        statusDisplay.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jPanel5.add(statusDisplay);
        statusDisplay.setVisible(false);

        jPanel10.setBackground(new java.awt.Color(0, 204, 204));

        jLabel6.setBackground(new java.awt.Color(0, 204, 204));
        jLabel6.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("RECRUITMENT SYSTEM");
        jLabel6.setToolTipText("");
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridLayout(5, 4, 5, 10));

        vacancyLabel.setBackground(new java.awt.Color(204, 204, 204));
        vacancyLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        vacancyLabel.setText("Vacancy:");
        jPanel2.add(vacancyLabel);

        vacancyTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel2.add(vacancyTF);

        staffNameLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        staffNameLabel.setText("Staff Name:");
        jPanel2.add(staffNameLabel);

        staffNameTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel2.add(staffNameTF);

        qualificationLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        qualificationLabel.setText("Qualification:");
        jPanel2.add(qualificationLabel);

        qualificationTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel2.add(qualificationTF);

        designationLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        designationLabel.setText("Designation:");
        jPanel2.add(designationLabel);

        designationTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel2.add(designationTF);

        jobTypeLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jobTypeLabel.setText("Job Type:");
        jPanel2.add(jobTypeLabel);

        jobTypeTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel2.add(jobTypeTF);

        joinDateLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        joinDateLabel.setText("Joining Date:");
        jPanel2.add(joinDateLabel);

        joinDateTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel2.add(joinDateTF);

        hirerLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        hirerLabel.setText("Hirer:");
        jPanel2.add(hirerLabel);

        hirerTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel2.add(hirerTF);

        salaryLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        salaryLabel.setText("Salary:");
        jPanel2.add(salaryLabel);

        salaryTF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jPanel2.add(salaryTF);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel2);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel3);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel4);

        joinedRB.setBackground(new java.awt.Color(255, 255, 255));
        joinedRB.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        joinedRB.setText("Joined");
        jPanel2.add(joinedRB);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new java.awt.GridLayout(1, 4, 5, 10));

        addFulltimeStaff.setBackground(new java.awt.Color(204, 204, 204));
        addFulltimeStaff.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        addFulltimeStaff.setText("Add Fulltime Staff");
        addFulltimeStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFulltimeStaffActionPerformed(evt);
            }
        });
        jPanel4.add(addFulltimeStaff);

        addParttimeStaff.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        addParttimeStaff.setText("Add Parttime Staff");
        addParttimeStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParttimeStaffActionPerformed(evt);
            }
        });
        jPanel4.add(addParttimeStaff);

        addSalary.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        addSalary.setText("Add Salary ");
        addSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSalaryActionPerformed(evt);
            }
        });
        jPanel4.add(addSalary);

        addWorkingShifts.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        addWorkingShifts.setText("Add Working Shifts");
        addWorkingShifts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWorkingShiftsActionPerformed(evt);
            }
        });
        jPanel4.add(addWorkingShifts);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 883, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 382, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>                        

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        clearingInputTextfield();
    }                                     

    private void terminateActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here
        try{
            if(vacancyTF.getText().trim().isEmpty()){
                vacancyTF.setBackground(Color.RED);
                throw new Exception("Input field is empty");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Kindly check your input where RED color is visible.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        try{
            int vacancy =Integer.parseInt(vacancyTF.getText());
            if(foundVacancyForAllStaff(vacancy)){
                for (staffhire s : allstaff) {
                    if(s.getvacancyNumber() == vacancy && s instanceof PartTimeStaffHire){
                        PartTimeStaffHire ps = (PartTimeStaffHire) s;
                        ps.setTerminated(true);
                        ps.setJoined(false);
                        vacancyTF.setBackground(Color.WHITE);
                        JOptionPane.showMessageDialog(null, "Staff is terminated", "Warning", JOptionPane.WARNING_MESSAGE);
                        break;
                    }   
                }
            }
            else{
                throw new Exception("Staff Not Found");
            }
        }catch(Exception e){
            vacancyTF.setBackground(Color.RED);
            JOptionPane.showMessageDialog(null, "This staff Isn't existed.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }                                         

    private void terminateRBActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void addFulltimeStaffActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        try{
            try{
                vacancy =Integer.parseInt(vacancyTF.getText().trim());
                if(foundVacancyForAllStaff(vacancy)){
                    JOptionPane.showMessageDialog(null, "Staff for the given Vacancy is already existed", "Warning", JOptionPane.WARNING_MESSAGE);
                    throw new Exception("Vacancy is found");
                }
                vacancyTF.setBackground(Color.WHITE);
            }catch(Exception e){
                vacancyTF.setBackground(Color.RED);
                throw e;
            }
            
            try{
                
                if (!staffNameTF.getText().trim().isEmpty()) {
                    staffName = staffNameTF.getText().trim();
                    staffNameTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                staffNameTF.setBackground(Color.RED);
                throw e;
            }
            try{
                
                if (!qualificationTF.getText().trim().isEmpty()) {
                    staffQualification = qualificationTF.getText().trim();
                    qualificationTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                qualificationTF.setBackground(Color.RED);
                throw e;
            }
            try{
                
                if (!designationTF.getText().trim().isEmpty()) {
                    staffDesignation = designationTF.getText().trim();
                    designationTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                designationTF.setBackground(Color.RED);
                throw e;
            }
            
           try{
                
                if (!jobTypeTF.getText().trim().isEmpty()) {
                    jobType = jobTypeTF.getText().trim();
                    jobTypeTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                jobTypeTF.setBackground(Color.RED);
                throw e;
            }
            
           try{
                
                if (!joinDateTF.getText().trim().isEmpty()) {
                    joiningDate = joinDateTF.getText().trim();
                    joinDateTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                joinDateTF.setBackground(Color.RED);
                throw e;
            }
           
            try{
                
                if (!hirerTF.getText().trim().isEmpty()) {
                    appointedBy = hirerTF.getText().trim();
                    hirerTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                hirerTF.setBackground(Color.RED);
                throw e;
            }
            
            try{
                salary = Double.parseDouble(salaryTF.getText().trim());
                salaryTF.setBackground(Color.WHITE);
            }catch(Exception e){
                salaryTF.setBackground(Color.RED);
                throw e;
            }
            
            try{
                weeklyFractionalHours = Integer.parseInt(weeklyFractionalHoursTF.getText().trim());
                weeklyFractionalHoursTF.setBackground(Color.WHITE);
            }catch(Exception e){
                weeklyFractionalHoursTF.setBackground(Color.RED);
                throw e;
            }
            
            try {
                if (joinedRB.isSelected()) {
                    joined = joinedRB.isSelected();
                    joinedRB.setOpaque(true);
                    joinedRB.setBackground(defaultBackground);
                    System.out.println("The value of myBool is: " + joined);
                } else {
                    throw new Exception("RadioButton not selected");   
                }
            } catch (Exception e) {
                joinedRB.setOpaque(true);
                joinedRB.setBackground(Color.RED);
                throw e;
            }
            
            fsho = new fullTimeStaffHire(vacancy, staffDesignation, staffName, jobType, joiningDate, staffQualification, appointedBy, salary, weeklyFractionalHours, joined);
            allstaff.add(fsho);
            JOptionPane.showMessageDialog(null, "Full Time Staff is added.", "Warning", JOptionPane.WARNING_MESSAGE);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Kindly check your input where RED color is visible.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }                                                

    private void addParttimeStaffActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        try{
            try{
                vacancy =Integer.parseInt(vacancyTF.getText().trim());
                if(foundVacancyForAllStaff(vacancy)){
                    JOptionPane.showMessageDialog(null, "Staff for the given Vacancy is already existed", "Warning", JOptionPane.WARNING_MESSAGE);
                    throw new Exception("Vacancy is found");
                }
                vacancyTF.setBackground(Color.WHITE);
            }catch(Exception e){
                vacancyTF.setBackground(Color.RED);
                throw e;
            }
            
            try{
                
                if (!staffNameTF.getText().trim().isEmpty()) {
                    staffName = staffNameTF.getText().trim();
                    staffNameTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                staffNameTF.setBackground(Color.RED);
                throw e;
            }
            try{
                
                if (!qualificationTF.getText().trim().isEmpty()) {
                    staffQualification = qualificationTF.getText().trim();
                    qualificationTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                qualificationTF.setBackground(Color.RED);
                throw e;
            }
            try{
                
                if (!designationTF.getText().trim().isEmpty()) {
                    staffDesignation = designationTF.getText().trim();
                    designationTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                designationTF.setBackground(Color.RED);
                throw e;
            }
            
           try{
                
                if (!jobTypeTF.getText().trim().isEmpty()) {
                    jobType = jobTypeTF.getText().trim();
                    jobTypeTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                jobTypeTF.setBackground(Color.RED);
                throw e;
            }
            
           try{
                
                if (!joinDateTF.getText().trim().isEmpty()) {
                    joiningDate = joinDateTF.getText().trim();
                    joinDateTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                joinDateTF.setBackground(Color.RED);
                throw e;
            }
           
            try{
                
                if (!hirerTF.getText().trim().isEmpty()) {
                    appointedBy = hirerTF.getText().trim();
                    hirerTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                hirerTF.setBackground(Color.RED);
                throw e;
            }
            
            try{
                wagesPerHour = Double.parseDouble(wagesPerHourTF.getText().trim());
                wagesPerHourTF.setBackground(Color.WHITE);
            }catch(Exception e){
                wagesPerHourTF.setBackground(Color.RED);
                throw e;
            }
            
            try{
                workingHours = Integer.parseInt(workingHoursTF.getText().trim());
                workingHoursTF.setBackground(Color.WHITE);
            }catch(Exception e){
                workingHoursTF.setBackground(Color.RED);
                throw e;
            }
            
            try{
                
                if (!shiftsTF.getText().trim().isEmpty()) {
                    shifts = shiftsTF.getText().trim();
                    shiftsTF.setBackground(Color.WHITE);
                } else {
                    throw new Exception("Textfield is empty");
                }
            }catch(Exception e){
                shiftsTF.setBackground(Color.RED);
                throw e;
            }
            
            try {
                if (joinedRB.isSelected()) {
                    joined = joinedRB.isSelected();
                    joinedRB.setOpaque(true);
                    joinedRB.setBackground(defaultBackground);
                    System.out.println("The value of myBool is: " + joined);
                } else {
                    throw new Exception("RadioButton not selected");   
                }
            } catch (Exception e) {
                joinedRB.setOpaque(true);
                joinedRB.setBackground(Color.RED);
                throw e;
            }
            
            try {
                if (!terminateRB.isSelected()) {
                    terminated = terminateRB.isSelected();
                    terminateRB.setOpaque(true);
                    terminateRB.setBackground(defaultBackground);
                    System.out.println("The value of myBool is: " + terminated);
                } else {
                    throw new Exception("RadioButton is selected");   
                }
            } catch (Exception e) {
                terminateRB.setOpaque(true);
                terminateRB.setBackground(Color.RED);
                throw e;
            }
            
            psho = new PartTimeStaffHire(vacancy, staffDesignation, staffName, jobType, joiningDate, staffQualification, appointedBy,
                    workingHours, wagesPerHour, shifts, terminated, joined);
            allstaff.add(psho);
            JOptionPane.showMessageDialog(null, "Part Time Staff is added.", "Warning", JOptionPane.WARNING_MESSAGE);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Kindly check your input where RED color is visible.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }                                                

    private void addSalaryActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        int count =0;
        
        try{
            if(vacancyTF.getText().trim() != null && staffNameTF.getText().trim() != null && salaryTF.getText().trim() != null){
                int vacancy =Integer.parseInt(vacancyTF.getText());
            }
            else{
                
                if(staffNameTF.getText().trim() == null){
                    staffNameTF.setBackground(Color.RED);
                }
                if(salaryTF.getText().trim() == null){
                    salaryTF.setBackground(Color.RED);
                }
                throw new Exception("Input is not valid");
            }
        }catch(Exception e){
            vacancyTF.setBackground(Color.RED);
            JOptionPane.showMessageDialog(null, "Please Check the red marked input field.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        int vacancy =Integer.parseInt(vacancyTF.getText());
        String staffName = staffNameTF.getText();
        try{
            for (staffhire s : allstaff) {
                System.out.println("The new value of object " + vacancy + staffName +s.getvacancyNumber() + s.getstaffName() );
                if(s.getvacancyNumber() == vacancy && s.getstaffName().equals(staffName) && s instanceof fullTimeStaffHire){
                    fullTimeStaffHire fs = (fullTimeStaffHire) s;
                    double Salary = Double.parseDouble(salaryTF.getText());
                    fs.setSalary(Salary);
                    System.out.println("The new value of object " + fs.getSalary());
                    JOptionPane.showMessageDialog(null, "Salary is set successfully", "Warning", JOptionPane.WARNING_MESSAGE);
                    break;
                }
                
                count++;    
            }
            if(allstaff.size() == 1){
                
            }
            else if(count == allstaff.size()){
                    throw new Exception("Staff not found");
                }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "This staff Isn't existed.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }                                         

    private void addWorkingShiftsActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        String shift = shiftsTF.getText().trim();
        String staffName = staffNameTF.getText().trim();
        int count =0;
        
        try{
            if(vacancyTF.getText().trim() != null && staffNameTF.getText().trim() != null && shiftsTF.getText().trim() != null){
                int vacancy =Integer.parseInt(vacancyTF.getText());
            }
            else{
                
                if(staffNameTF.getText().trim() == null){
                    staffNameTF.setBackground(Color.RED);
                }
                if(shiftsTF.getText().trim() == null){
                    shiftsTF.setBackground(Color.RED);
                }
                throw new Exception("Input is not valid");
            }
        }catch(Exception e){
            vacancyTF.setBackground(Color.RED);
            JOptionPane.showMessageDialog(null, "Please Check the red marked input field.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        int vacancy =Integer.parseInt(vacancyTF.getText());
        try{
            for (staffhire s : allstaff) {
                if(s.getvacancyNumber() == vacancy && s.getstaffName().equals(staffName) && s.getJoined() == true && s instanceof PartTimeStaffHire){
                    PartTimeStaffHire ps = (PartTimeStaffHire) s;
                    ps.setShifts(shift);
                    JOptionPane.showMessageDialog(null, "SHIFT is set successfully", "Warning", JOptionPane.WARNING_MESSAGE);
                    break;
                }
                
                count++;    
            }
            if(allstaff.size() == 1){
                
            }
            else if(count == allstaff.size()){
                    throw new Exception("Staff not found");
                }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "This staff Isn't existed.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }                                                

    private void fullTimeStaffRBActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        staffDetails.setSelected(false);
        partTimeStaffRB.setSelected(false);
        inputGuiForFulltimeStaff();
    }                                               

    private void partTimeStaffRBActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
        
        fullTimeStaffRB.setSelected(false);
        staffDetails.setSelected(false);
        inputGuiForParttimeStaff();
    }                                               

    private void mainPageActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        GUIforMainPage();
    }                                        

    private void staffDetailsActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        GUIforStaffDetailsRB();
    }                                            

    private void displayNumberButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
        if(staffDetails.isSelected() == true){
            int vacancy =Integer.parseInt(vacancyTF.getText());
            if(foundVacancyForAllStaff(vacancy)){
                for(staffhire s : allstaff){
                    if(s.getvacancyNumber() == vacancy && s instanceof PartTimeStaffHire){
                        outputGuiForParttimeStaff();
                        PartTimeStaffHire ps = (PartTimeStaffHire) s;
                        ps.display();
                        vacancyTF.setText(String.valueOf(vacancy));
                        staffNameTF.setText(ps.getstaffName());
                        qualificationTF.setText(ps.getQualification());
                        designationTF.setText(ps.getdesignationType());
                        jobTypeTF.setText(ps.getjobType());
                        joinDateTF.setText(ps.getjoiningDate());
                        hirerTF.setText(ps.getappointedBy());
                        joinedRB.setSelected(ps.getJoined());
                        workingHoursTF.setText(String.valueOf(ps.getWorkingHour()));
                        wagesPerHourTF.setText(String.valueOf(ps.getWagesPerhour()));
                        shiftsTF.setText(ps.getShifts());
                        terminateRB.setSelected(ps.getTerminated());
                        statusDisplay.setVisible(true);
                        if(ps.getTerminated() == true){
                            statusDisplay.setText("Employee is TERMINATED");
                            statusDisplay.setBackground(Color.RED);
                            statusDisplay.setForeground(Color.WHITE);
                        }
                        else{
                            statusDisplay.setText("Employee is JOINED");
                            statusDisplay.setBackground(Color.GREEN);
                        }
                    }
                    else if(s.getvacancyNumber() == vacancy && s instanceof fullTimeStaffHire){
                        outputGuiForFulltimeStaff();
                        fullTimeStaffHire fs = (fullTimeStaffHire) s;
                        fs.display();
                        vacancyTF.setText(String.valueOf(vacancy));
                        staffNameTF.setText(fs.getstaffName());
                        qualificationTF.setText(fs.getQualification());
                        designationTF.setText(fs.getdesignationType());
                        jobTypeTF.setText(fs.getjobType());
                        joinDateTF.setText(fs.getjoiningDate());
                        hirerTF.setText(fs.getappointedBy());
                        boolean boolval = fs.getJoined();
                        joinedRB.setSelected(boolval);
                        salaryTF.setText(String.valueOf(fs.getSalary()));
                        weeklyFractionalHoursTF.setText(String.valueOf(fs.getWeeklyFractionalHours()));
                        statusDisplay.setText("Employee is JOINED");
                        statusDisplay.setBackground(Color.GREEN);
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Please Set the correct input", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
        else{
            displayNumberTF.setText(Integer.toString(allstaff.size()));
            allStaffDisplay();
        }
    }                                                   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecruitmentSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecruitmentSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecruitmentSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecruitmentSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecruitmentSystem().setVisible(true);
            }
        });
    }
    
    //GUI Element controlling method
    
    
    public void GUIforMainPage(){
        staffNameLabel.setVisible(true);
        staffNameTF.setVisible(true);
        jobTypeLabel.setVisible(true);
        jobTypeTF.setVisible(true);
        joinDateLabel.setVisible(true);
        joinDateTF.setVisible(true);
        hirerLabel.setVisible(true);
        hirerTF.setVisible(true);
        designationLabel.setVisible(true);
        designationTF.setVisible(true);
        qualificationLabel.setVisible(true);
        qualificationTF.setVisible(true);
        joinedRB.setVisible(true);
        wagesPerHourTF.setVisible(true);
        wagesPerHourLabel.setVisible(true);
        workingHoursTF.setVisible(true);
        workingHoursLabel.setVisible(true);
        shiftsTF.setVisible(true);
        shiftsLabel.setVisible(true);
        addParttimeStaff.setVisible(true);
        addWorkingShifts.setVisible(true);
        terminate.setVisible(true);
        terminateRB.setVisible(false);
        salaryTF.setVisible(true);
        salaryLabel.setVisible(true);
        weeklyFractionalHoursTF.setVisible(true);
        weeklyFractionalHoursLabel.setVisible(true);
        addFulltimeStaff.setVisible(true);
        addSalary.setVisible(true);
        fullTimeStaffRB.setSelected(false);
        partTimeStaffRB.setSelected(false);
        staffDetails.setSelected(false);
        statusDisplay.setVisible(false);
    }
    
    public void GUIforStaffDetailsRB(){ 
        
        if(staffDetails.isSelected() == true){
            fullTimeStaffRB.setSelected(false);
            partTimeStaffRB.setSelected(false);
            salaryTF.setVisible(false);
            salaryLabel.setVisible(false);
            weeklyFractionalHoursTF.setVisible(false);
            weeklyFractionalHoursLabel.setVisible(false);
            addFulltimeStaff.setVisible(false);
            addSalary.setVisible(false);
            wagesPerHourTF.setVisible(false);
            wagesPerHourLabel.setVisible(false);
            workingHoursTF.setVisible(false);
            workingHoursLabel.setVisible(false);
            shiftsTF.setVisible(false);
            shiftsLabel.setVisible(false);
            addParttimeStaff.setVisible(false);
            addWorkingShifts.setVisible(false);
            terminate.setVisible(false);
            terminateRB.setVisible(false);
            staffNameLabel.setVisible(false);
            staffNameTF.setVisible(false);
            jobTypeLabel.setVisible(false);
            jobTypeTF.setVisible(false);
            joinDateLabel.setVisible(false);
            joinDateTF.setVisible(false);
            hirerLabel.setVisible(false);
            hirerTF.setVisible(false);
            designationLabel.setVisible(false);
            designationTF.setVisible(false);
            qualificationLabel.setVisible(false);
            qualificationTF.setVisible(false);
            joinedRB.setVisible(false);
            statusDisplay.setVisible(false);
            terminateRB.setVisible(false);
        }
    }
    
    public void inputGuiForParttimeStaff(){
        if(partTimeStaffRB.isSelected() == true && fullTimeStaffRB.isSelected() == false){
            salaryTF.setVisible(false);
            salaryLabel.setVisible(false);
            weeklyFractionalHoursTF.setVisible(false);
            weeklyFractionalHoursLabel.setVisible(false);
            addFulltimeStaff.setVisible(false);
            addSalary.setVisible(false);
            wagesPerHourTF.setVisible(true);
            wagesPerHourLabel.setVisible(true);
            workingHoursTF.setVisible(true);
            workingHoursLabel.setVisible(true);
            shiftsTF.setVisible(true);
            shiftsLabel.setVisible(true);
            addParttimeStaff.setVisible(true);
            addWorkingShifts.setVisible(true);
            terminate.setVisible(true);
            terminateRB.setVisible(true);
            staffNameLabel.setVisible(true);
            staffNameTF.setVisible(true);
            jobTypeLabel.setVisible(true);
            jobTypeTF.setVisible(true);
            joinDateLabel.setVisible(true);
            joinDateTF.setVisible(true);
            hirerLabel.setVisible(true);
            hirerTF.setVisible(true);
            designationLabel.setVisible(true);
            designationTF.setVisible(true);
            qualificationLabel.setVisible(true);
            qualificationTF.setVisible(true);
            joinedRB.setVisible(true);
            statusDisplay.setVisible(false);
            terminateRB.setVisible(false);
        }
        else{
            salaryTF.setVisible(true);
            salaryLabel.setVisible(true);
            weeklyFractionalHoursTF.setVisible(true);
            weeklyFractionalHoursLabel.setVisible(true);
            addFulltimeStaff.setVisible(true);
            addSalary.setVisible(true);
        }
    }
    
    public void outputGuiForParttimeStaff(){
        staffNameLabel.setVisible(true);
        staffNameTF.setVisible(true);
        jobTypeLabel.setVisible(true);
        jobTypeTF.setVisible(true);
        joinDateLabel.setVisible(true);
        joinDateTF.setVisible(true);
        hirerLabel.setVisible(true);
        hirerTF.setVisible(true);
        designationLabel.setVisible(true);
        designationTF.setVisible(true);
        qualificationLabel.setVisible(true);
        qualificationTF.setVisible(true);
        joinedRB.setVisible(true);
        terminateRB.setVisible(true);
        wagesPerHourTF.setVisible(true);
        wagesPerHourLabel.setVisible(true);
        workingHoursTF.setVisible(true);
        workingHoursLabel.setVisible(true);
        shiftsTF.setVisible(true);
        shiftsLabel.setVisible(true);
    }
    
   public void inputGuiForFulltimeStaff(){
        if(fullTimeStaffRB.isSelected() == true && partTimeStaffRB.isSelected() == false){
            wagesPerHourTF.setVisible(false);
            wagesPerHourLabel.setVisible(false);
            workingHoursTF.setVisible(false);
            workingHoursLabel.setVisible(false);
            shiftsTF.setVisible(false);
            shiftsLabel.setVisible(false);
            addParttimeStaff.setVisible(false);
            addWorkingShifts.setVisible(false);
            terminate.setVisible(false);
            terminateRB.setVisible(false);
            salaryTF.setVisible(true);
            salaryLabel.setVisible(true);
            weeklyFractionalHoursTF.setVisible(true);
            weeklyFractionalHoursLabel.setVisible(true);
            addFulltimeStaff.setVisible(true);
            addSalary.setVisible(true);
            staffNameLabel.setVisible(true);
            staffNameTF.setVisible(true);
            jobTypeLabel.setVisible(true);
            jobTypeTF.setVisible(true);
            joinDateLabel.setVisible(true);
            joinDateTF.setVisible(true);
            hirerLabel.setVisible(true);
            hirerTF.setVisible(true);
            designationLabel.setVisible(true);
            designationTF.setVisible(true);
            qualificationLabel.setVisible(true);
            qualificationTF.setVisible(true);
            joinedRB.setVisible(true);
            statusDisplay.setVisible(false);
            
        }
        else{
            wagesPerHourTF.setVisible(true);
            wagesPerHourLabel.setVisible(true);
            workingHoursTF.setVisible(true);
            workingHoursLabel.setVisible(true);
            shiftsTF.setVisible(true);
            shiftsLabel.setVisible(true);
            addParttimeStaff.setVisible(true);
            addWorkingShifts.setVisible(true);
            terminate.setVisible(true);
            terminateRB.setVisible(true);
        }
    }
   
   public void outputGuiForFulltimeStaff(){
        staffNameLabel.setVisible(true);
        staffNameTF.setVisible(true);
        jobTypeLabel.setVisible(true);
        jobTypeTF.setVisible(true);
        joinDateLabel.setVisible(true);
        joinDateTF.setVisible(true);
        hirerLabel.setVisible(true);
        hirerTF.setVisible(true);
        designationLabel.setVisible(true);
        designationTF.setVisible(true);
        qualificationLabel.setVisible(true);
        qualificationTF.setVisible(true);
        joinedRB.setVisible(true);
        salaryTF.setVisible(true);
        salaryLabel.setVisible(true);
        weeklyFractionalHoursTF.setVisible(true);
        weeklyFractionalHoursLabel.setVisible(true);
    }
   
   public void clearingInputTextfield(){
       vacancyTF.setText("");
       jobTypeTF.setText("");
       staffNameTF.setText("");
       qualificationTF.setText("");
       designationTF.setText("");
       joinDateTF.setText("");
       hirerTF.setText("");
       salaryTF.setText("");
       weeklyFractionalHoursTF.setText("");
       wagesPerHourTF.setText("");
       workingHoursTF.setText("");
       shiftsTF.setText("");
       joinedRB.setSelected(false);
       terminateRB.setSelected(false);
       vacancyTF.setBackground(Color.WHITE);
       jobTypeTF.setBackground(Color.WHITE);
       staffNameTF.setBackground(Color.WHITE);
       qualificationTF.setBackground(Color.WHITE);
       designationTF.setBackground(Color.WHITE);
       joinDateTF.setBackground(Color.WHITE);
       hirerTF.setBackground(Color.WHITE);
       salaryTF.setBackground(Color.WHITE);
       weeklyFractionalHoursTF.setBackground(Color.WHITE);
       wagesPerHourTF.setBackground(Color.WHITE);
       workingHoursTF.setBackground(Color.WHITE);
       shiftsTF.setBackground(Color.WHITE);
       joinedRB.setOpaque(true);
       joinedRB.setBackground(defaultBackground);
       terminateRB.setOpaque(true);
       terminateRB.setBackground(defaultBackground);
   }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Clear;
    private javax.swing.JButton addFulltimeStaff;
    private javax.swing.JButton addParttimeStaff;
    private javax.swing.JButton addSalary;
    private javax.swing.JButton addWorkingShifts;
    private javax.swing.JLabel designationLabel;
    private javax.swing.JTextField designationTF;
    private javax.swing.JButton displayNumberButton;
    private javax.swing.JLabel displayNumberLabel;
    private javax.swing.JTextField displayNumberTF;
    private javax.swing.JRadioButton fullTimeStaffRB;
    private javax.swing.JLabel hirerLabel;
    private javax.swing.JTextField hirerTF;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel jobTypeLabel;
    private javax.swing.JTextField jobTypeTF;
    private javax.swing.JLabel joinDateLabel;
    private javax.swing.JTextField joinDateTF;
    private javax.swing.JRadioButton joinedRB;
    private javax.swing.JButton mainPage;
    private javax.swing.JRadioButton partTimeStaffRB;
    private javax.swing.JLabel qualificationLabel;
    private javax.swing.JTextField qualificationTF;
    private javax.swing.JLabel salaryLabel;
    private javax.swing.JTextField salaryTF;
    private javax.swing.JLabel shiftsLabel;
    private javax.swing.JTextField shiftsTF;
    private javax.swing.JRadioButton staffDetails;
    private javax.swing.JLabel staffNameLabel;
    private javax.swing.JTextField staffNameTF;
    private javax.swing.JTextField statusDisplay;
    private javax.swing.JButton terminate;
    private javax.swing.JRadioButton terminateRB;
    private javax.swing.JLabel vacancyLabel;
    private javax.swing.JTextField vacancyTF;
    private javax.swing.JLabel wagesPerHourLabel;
    private javax.swing.JTextField wagesPerHourTF;
    private javax.swing.JLabel weeklyFractionalHoursLabel;
    private javax.swing.JTextField weeklyFractionalHoursTF;
    private javax.swing.JLabel workingHoursLabel;
    private javax.swing.JTextField workingHoursTF;
    // End of variables declaration                   
}